{
  "name": "safe-access",
  "version": "0.1.0",
  "description": "A utility to allow for safe accessing of nested properties",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "keywords": [
    "safe",
    "accessor",
    "nested"
  ],
  "author": {
    "name": "Eric Trinh"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "^1.17.1",
    "chai": "^1.9.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/erictrinh/safe-access.git"
  },
  "bugs": {
    "url": "https://github.com/erictrinh/safe-access/issues"
  },
  "homepage": "https://github.com/erictrinh/safe-access",
  "readme": "# Safe Access\n\n`safe-access` is a Javascript utility to allow for safe accessing of nested properties by soaking up nulls, inspired by Coffeescript's [existential operator](http://coffeescript.org/#operators).\n\n## I know Coffeescript. Why should I use this?\n\nAre you writing Javascript and miss doing this in Coffeescript?\n\n```coffeescript\nvery?.nested?.property?.and?.array?[0]?.func?()\n```\n\nWell, now you can do that without all the question marks:\n\n```javascript\nvar access = require('safe-access');\naccess(very, 'nested.property.and.array[0].func()');\n```\n\n## I don't know Coffeescript. Why should I use this?\n\nWhen accessing deeply nested properties in Javascript, it's important to guard against accessing non-existent properties in the middle of a chain. For example, `obj.that.is.very.nested` will throw an error if the property `that` doesn't exist. This is bad because it halts your program altogether (unless you have a try/catch in place). In Javascript, one way to guard against this is with long `&&` chains:\n\n```javascript\nvar nestedThang = obj.that && obj.that.is && obj.that.is.very && obj.that.is.very.nested;\n```\n\n`nestedThang` will simply be `undefined` if `that` doesn't exist (instead of throwing an error). But, this gets quite messy (and annoying to type out).\n\nThe equivalent, using `safe-access`:\n\n```javascript\nvar access = require('safe-access');\nvar nestedThang = access(obj, 'that.is.very.nested');\n```\n\n`safe-access` can even be used to safely access arrays and call functions:\n\n```javascript\nvar obscenelyNested = access(obj, 'leading.to.array[0].andFunc()');\n```\n\nwhich is the equivalent of this charming thing in Javascript:\n\n```javascript\nvar obscenelyNested = obj &&\n  obj.leading &&\n  obj.leading.to &&\n  obj.leading.to.array &&\n  obj.leading.to.array[0] &&\n  obj.leading.to.array[0].andFunc &&\n  (typeof obj.leading.to.array[0].andFunc === 'function' ?\n  obj.leading.to.array[0].andFunc() :\n  undefined);\n```\n\n## Calling functions with arguments\n\nSometimes, it's necessary to call functions with some arguments. Every argument after the accessor string (3rd argument and beyond) will be used as the arguments to each function call in the accessor string. Like this:\n\n```javascript\n// equivalent of `obj.thing.add(1, 2);`\naccess(obj, 'thing.add()', [1, 2]);\n```\n\nOr maybe you have multiple function calls that receive arguments:\n\n```javascript\n// equivalent of `thing.add(1, 2).toFixed(1).substr(2);`\naccess(obj, 'thing.add().toFixed().substr()', [1, 2], 1, 2);\n```\n\nNotice that if you need to pass in multiple arguments (like in the `add` function), you'll need to pass the arguments as an array. The caveat is **if you need to pass in an array as an argument, you'll need to pass in a nested array**.\n\nAn example, passing in an array as an argument:\n\n```javascript\naccess(window._, 'compact()', [[ false, 'boop', 'beep', '', 'meep' ]]);\n// returns [ 'boop', 'beep', 'meep' ] OR undefined if window._ doesn't exist\n```\n\n## Automatic Currying\n`safe-access` auto-curries, which means omitting the second argument will return a function that you can use to access the same object over and over again. This can be useful if you are accessing many different nested properties on an object.\n\n```javascript\nvar objDot = access(obj);\nobjDot('nested.thing'); // obj.nested.thing\nobjDot('other.nested.thing'); // obj.other.nested.thing\n```\n",
  "readmeFilename": "readme.md",
  "_id": "safe-access@0.1.0",
  "_shasum": "ce46b1190bd316672e1c7d001cab32970c488955",
  "_from": "safe-access@0.1.0",
  "_resolved": "https://registry.npmjs.org/safe-access/-/safe-access-0.1.0.tgz"
}
